#!/usr/bin/env node
/* vim: set ft=javascript: */

/*
 * promstat: command-line Prometheus poller
 *
 * There are a few levels of abstraction here:
 *
 * - promstat (this program): responsible for parsing command-line arguments,
 *   managing a handle to the promstat library (in ./lib), and printing out
 *   results.
 *
 * - lib/promstat.js (library): responsible for fetching metrics provided by
 *   targets and tracking the values for the metrics requested by the user
 *
 * - lib/prometheus.js: responsible for fetching metrics provided by a target
 *
 * As an example, a user may request a metric like "http_requests_completed"
 * from each of three targets.  promstat (the program) will instantiate a
 * promstat library handle that requests that we track this metric from these
 * three targets.  The promstat library handle will fetch _all_ metrics from
 * each target (since that's the only operation that Prometheus provides), map
 * those metrics onto whatever the user requested, and interpret the results
 * accordingly (e.g., subtract values for counters, do nothing for gauges, etc).
 */

var mod_assertplus = require('assert-plus');
var mod_cmdutil = require('cmdutil');
var mod_extsprintf = require('extsprintf');
var mod_getopt = require('posix-getopt');
var mod_jsprim = require('jsprim');
var mod_tab = require('tab');
var mod_url = require('url');
var VError = require('verror');

var printf = mod_extsprintf.printf;

var lib_promstat = require('../lib/promstat');
var lib_si = require('../lib/setinterval');

var PROMSTAT_CONCURRENCY = 32;
var PROMSTAT_TIMEOUT = 5000;

function main()
{
	var parser, option, args, p, t;
	var ntargets, pscmd;

	mod_cmdutil.configure({
	    'usageMessage': 'poll and report Prometheus agent stats',
	    'synopses': [
		'-t/--target URL ... -l/--list [-v/--verbose] ',
		'-t/--target URL ... -m/--metric METRIC_NAME ... OPTIONS...' +
		    '[INTERVAL [COUNT]]'
	    ]
	});

	/*
	 * pscmd holds the state of this program.  This is mostly the
	 * (immutable) arguments to the program, plus some state associated with
	 * the pretty-printers.
	 *
	 * If there's only one metric, we'll use promstatReportTable to emit a
	 * compact tabular form.  Otherwise, we'll use promstatReportFull.
	 */
	pscmd = {
	    /* list of metric names requested by the user */
	    'pscmd_metrics': [],
	    /* list of targets requested by the user */
	    'pscmd_consumer': new lib_promstat.PromConsumer(),
	    /* interval (in milliseconds) to collect datapoints */
	    'pscmd_intervalms': 1000,
	    /* number of datapoints to collect before exiting */
	    'pscmd_ndatapoints': null,
	    /* number of datapoints emitted */
	    'pscmd_nemitted': 0,
	    /* handle to promstat library object */
	    'pscmd_promstat': null,

	    /* output function */
	    'pscmd_print': null,
	    /* node-tab table (only for tabular output) */
	    'pscmd_table': null,

	    /* just list the metrics */
	    'pscmd_listonly': false,
	    /* verbose listing */
	    'pscmd_verbose': false
	};

	/*
	 * Parse named command-line arguments.
	 */
	parser = new mod_getopt.BasicParser('l(list)m:(metric)' +
	    'o:(output)t:(target)v(verbose)', process.argv);
	while ((option = parser.getopt()) !== undefined) {
		switch (option.option) {
		case 'l':
			if (pscmd.pscmd_print !== null ||
			    pscmd.pscmd_metrics.length > 0) {
				mod_cmdutil.usage('cannot use -l/--list with ' +
				    '-o/--output or -m/--metric');
			}
			pscmd.pscmd_listonly = true;
			break;

		case 'm':
			if (pscmd.pscmd_listonly) {
				mod_cmdutil.usage('cannot use -m/--metric ' +
				    'with -l/--list');
			}
			p = option.optarg;
			/* TODO check this regexp against Prom docs */
			if (!/^[a-zA-Z_0-9]+$/.test(p)) {
				mod_cmdutil.usage('unsupported argument ' +
				    'for -m/--metric: "%s"', p);
			}
			pscmd.pscmd_metrics.push(p);
			break;

		case 'o':
			switch (option.optarg) {
			case 'compact':
				pscmd.pscmd_print = promstatReportTable;
				break;

			case 'full':
				pscmd.pscmd_print = promstatReportFull;
				break;

			default:
				mod_cmdutil.usage('unsupported argument ' +
				    'for -o/--output: "%s" (must be ' +
				    '"compact" or "full"', option.optarg);
				break;
			}
			break;

		case 't':
			t = validateTarget(option.optarg);
			if (t instanceof Error) {
				mod_cmdutil.usage(new VError(t,
				    'unsupported argument for -t/--target: ' +
				    '"%s"', option.optarg));
			}
			ntargets++;
			pscmd.pscmd_consumer.addTarget({
			    'label': t.t_label,
			    'hostname': t.t_hostname,
			    'port': t.t_port,
			    'pathname': t.t_pathname
			});
			break;

		case 'v':
			pscmd.pscmd_verbose = true;
			break;

		default:
			mod_cmdutil.usage();
			break;
		}
	}

	/*
	 * Parse optional command-line arguments: INTERVAL and COUNT.
	 */
	args = process.argv.slice(parser.optind());
	if (args.length > 0) {
		if (pscmd.pscmd_listonly) {
			mod_cmdutil.usage('unexpected arguments');
		}

		p = mod_jsprim.parseInteger(args[0], {
		    'allowSign': false,
		    'trimWhitespace': true
		});

		if (!(p instanceof Error) && p === 0) {
			p = new VError('must be positive');
		}

		if (p instanceof Error) {
			mod_cmdutil.usage(new VError(
			    p, 'unsupported interval: "%s"', args[0]));
		}

		pscmd.pscmd_intervalms = p * 1000;

		if (args.length > 1) {
			p = mod_jsprim.parseInteger(args[1], {
			    'allowSign': false,
			    'trimWhitespace': true
			});

			if (!(p instanceof Error) && p === 0) {
				p = new VError('must be positive');
			}

			if (p instanceof Error) {
				mod_cmdutil.usage(new VError(
				    p, 'unsupported count: "%s"', args[1]));
			}

			pscmd.pscmd_ndatapoints = p;
		}
	}

	if (ntargets === 0) {
		mod_cmdutil.usage('must specify at least one target');
	}

	if (pscmd.pscmd_listonly) {
		promstatListMetrics(pscmd);
		return;
	}

	if (pscmd.pscmd_verbose) {
		mod_cmdutil.usage('unexpected argument: -v/--verbose');
	}

	if (pscmd.pscmd_metrics.length === 0) {
		mod_cmdutil.usage('must specify at least one metric');
	}

	/*
	 * It's potentially very bad to use unbounded concurrency, but it might
	 * also be confusing if we don't, since the timing of datapoints from
	 * targets later in the list will be greatly affected by the response
	 * time of previous targets.  Warn the user in such cases.  If this
	 * becomes a problem, we probably want to bump the default concurrency
	 * and add a flag for changing it.  But this tool is really only
	 * intended to watch a handful of targets anyway.
	 */
	if (ntargets > PROMSTAT_CONCURRENCY) {
		mod_cmdutil.warn('number of targets (%d) exceeds ' +
		    'concurrency (%s).  Timing of data points may be ' +
		    'misleading.', ntargets, PROMSTAT_CONCURRENCY);
	}

	pscmd.pscmd_promstat = new lib_promstat.Promstat({
	    'consumer': pscmd.pscmd_consumer,
	    'concurrency': PROMSTAT_CONCURRENCY,
	    'requestTimeout': PROMSTAT_TIMEOUT,
	    'interval': pscmd.pscmd_intervalms,
	    'niterations': pscmd.pscmd_ndatapoints
	});

	pscmd.pscmd_metrics.forEach(function (m) {
		pscmd.pscmd_promstat.addMetric({ 'name': m });
	});

	pscmd.pscmd_promstat.start();
	pscmd.pscmd_promstat.on('tick', function onTick(datapoint) {
		promstatTick(pscmd, datapoint);
	});
}

/*
 * Given an argument for the "-t/--target" option, check whether it is a valid,
 * supported URL.  If so, return a parsed version of it.  If not, return an
 * error.
 */
function validateTarget(target)
{
	var u, p;

	mod_assertplus.string(target, 'target');
	u = mod_url.parse(target);
	if (u.protocol != 'http:') {
		return (new VError('must be "http"'));
	}

	if (!u.slashes) {
		return (new VError('bad URL format'));
	}

	if (u.auth !== null) {
		return (new VError('auth not supported'));
	}

	if (u.hash !== null) {
		return (new VError('hash not supported'));
	}

	if (u.search !== null) {
		return (new VError('query string not supported'));
	}

	if (u.port !== null) {
		p = mod_jsprim.parseInteger(u.port, {
		    'allowSign': false
		});
		if (!(p instanceof Error)) {
			if (p <= 0 || p >= 65536) {
				p = new VError('port number out of range');
			}
		}
		if (p instanceof Error) {
			return (new VError(p, 'bad TCP port'));
		}
	} else {
		p = 80;
	}

	return ({
	    't_label': u.hostname + ':' + u.port,
	    't_hostname': u.hostname,
	    't_port': p,
	    't_pathname': u.pathname
	});
}

/*
 * Kick off the mode where we list metric metadata.
 */
function promstatListMetrics(args)
{
	lib_promstat.promListMetrics({
	    'concurrency': PROMSTAT_CONCURRENCY,
	    'requestTimeout': PROMSTAT_TIMEOUT,
	    'consumer': args.pscmd_consumer
	}, function (err, metadata) {
		if (!metadata) {
			mod_cmdutil.fail(err);
		}

		promstatReportMetrics(args, metadata);

		if (err) {
			VError.errorForEach(err, function iterError(e) {
				mod_cmdutil.warn(e);
			});
		}
	});
}

function promstatTick(pscmd, datapoint)
{
	/*
	 * If this is the first time through, and the user did not specifically
	 * specify which output format to use, then we'll select the format now
	 * based on the types of the metrics that we found.
	 */
	var canusetbl, tgtkey, tblcols;

	if (pscmd.pscmd_print === null) {
		canusetbl = true;
		tgtkey = Object.keys(datapoint.psd_tgtvalues)[0];
		mod_assertplus.string(tgtkey,
		    'there must always be at least one target');
		datapoint.psd_tgtvalues[tgtkey].values.forEach(
		    function (metricValue) {
			canusetbl = canusetbl &&
			    metricValue.metadata !== null &&
			    (metricValue.metadata.pmm_type == 'counter' ||
			    metricValue.metadata.pmm_type == 'gauge');
		    });

		if (canusetbl) {
			pscmd.pscmd_print = promstatReportTable;
		} else {
			pscmd.pscmd_print = promstatReportFull;
		}
	}

	if (pscmd.pscmd_print == promstatReportTable &&
	    pscmd.pscmd_table === null) {
		tgtkey = Object.keys(datapoint.psd_tgtvalues)[0];
		mod_assertplus.string(tgtkey,
		    'there must always be at least one target');
		tblcols = [];
		datapoint.psd_tgtvalues[tgtkey].values.forEach(
		    function (metricValue, i) {
			var name = pscmd.pscmd_metrics[i];
			tblcols.push({
			    'label': name,
			    'align': 'right',
			    'width': Math.max(6, name.length)
			});
		    });
		pscmd.pscmd_table = new mod_tab.TableOutputStream({
		    'columns': [ {
		        'label': 'TIME',
			'width': 8
		    }, {
			'label': 'TARGET',
			'width': 35
		    } ].concat(tblcols)
		});
	}

	datapoint.psd_warnings.forEach(function (w) {
		mod_cmdutil.warn(w);
	});

	pscmd.pscmd_print(pscmd, datapoint);
}


/*
 * Outputters
 * XXX these all need to be revisited
 */

function promstatValue(metricValue)
{
	if (metricValue['latestRaw'] === null) {
		return ('no data');
	}

	if (metricValue['latestRaw'] instanceof Error) {
		return (metricValue['latestRaw'].message);
	}

	if (metricValue.metadata.pmm_type == 'counter') {
		return (mod_jsprim.hasKey(
		    metricValue, 'latestDelta') ?
		    metricValue['latestDelta'] :
		    metricValue['latestRaw'] + '*');
	}

	if (metricValue.metadata.pmm_type == 'gauge') {
		return (metricValue['latestRaw']);
	}

	return ('unsupported type');
}

/*
 * Compact, tabular output is used when there's exactly one metric.
 */
function promstatReportTable(pscmd, datapoint)
{
	var timestr;

	timestr = datapoint.psd_start.toISOString();
	timestr = timestr.substr('2017-09-25T'.length, '15:40:22'.length);
	mod_jsprim.forEachKey(datapoint.psd_tgtvalues,
	    function (tgtid, tgtinfo) {
		var row;
		row = {
		    'TIME': timestr,
		    'TARGET': tgtinfo.target.pt_label
		};
		tgtinfo.values.forEach(function (metricValue, i) {
			row[pscmd.pscmd_metrics[i]] = promstatValue(
			    metricValue);
		});
		pscmd.pscmd_table.writeRow(row);
	    });
}

/*
 * Full output is used by default.  It's not especially convenient to read, but
 * it includes all of the data.
 */
function promstatReportFull(pscmd, datapoint)
{
	console.log(datapoint.psd_start.toISOString());

	mod_jsprim.forEachKey(datapoint.psd_tgtvalues,
	    function (tgtid, tgtinfo) {
		printf('    %s\n', tgtinfo.target.pt_label);
		tgtinfo.values.forEach(function (metricValue, i) {
			printf('        %-40s %s\n',
			    pscmd.pscmd_metrics[i],
			    promstatValue(metricValue));
		});
	    });

	printf('\n');
}

/*
 * Outputter that just lists the metrics.
 */
function promstatReportMetrics(pscmd, metadata)
{
	printf('%-10s %-30s %s\n', 'TYPE', 'METRIC', 'NTARGS');
	metadata.metrics.forEach(function (metric) {
		printf('%-10s %-30s %6d\n', metric.pmm_type, metric.pmm_name,
		    metric.pmm_ntargets);

		if (pscmd.pscmd_verbose) {
			printf('    %s\n', metric.pmm_help);
		}

	});
}

main();
